source("http://bioconductor.org/biocLite.R")
biocLite("cummeRbund")
version
install.packages(c("boot", "class", "cluster", "foreign", "gdata", "gplots", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial"))
library("swirl")swirl()
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
z
?c
?nrow
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rec(c(0,1,2),times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect < 1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"Gene")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData <-sample(c(y,z), 100)
myNA<-is.na(myData)
print(myNA)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf= NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
matrix(1:20,4,5)
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(myData,cnames)
colnames(myData)<-cnames
myData
a <- available.package()
a <- available.packages()
head(rownames(a),10)
View(a)
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 0
x <- 1:10
if(x > 5) {
print(x)
}
x
x > 5
if(x[1] > 5)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x == 1) {
x <- 0
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# R Programming - April 2014
# Programming Assignment 2 - Caching the Inverse of a Matrix
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1:20,4,5)
dim(x)
class(x)
makeVector(x)
x$getmean()
makeVector(x)$set
makeVector(x)set
makeVector(x)
makeVector(x)$get
source("DogExample.R")
setwd("~/CourseraHW/Rprogramming/ProgrammingAssignment2")
setwd("~/CourseraHW/Rprogramming/ProgrammingAssignment2")
source("DogExample.R")
snookums <- dog(name = "Snookums", owner = "Granny Smith", barkType = "Yap!", age = 12)
fido <- dog()
snookums$info
snookums$info()
fido$info()
fido$bark()
snookums$bark()
# function to create dog object
dog <- function(name = "Fido", owner = "Bob", barkType = "Woof!", age = 3) {
noOfBarks <- 5
swatWithNewspaper <- function() {
cat("Yelp!\n")
noOfBarks <<- sample(3:10, 1)
}
bark <- function() {
for (i in 1:noOfBarks) cat(barkType)
}
info <- function() {
cat(paste("Name: ", name))
cat(paste("\nOwner: ", owner))
cat(paste("\nAge: ", age))
cat("\n")
}
list(swatWithNewspaper = swatWithNewspaper, bark = bark, info = info)
}
# create 2 dogs
snookums <- dog(name = "Snookums", owner = "Granny Smith", barkType = "Yap!", age = 12)
fido <- dog()
# function to create kitty object
kitty <- function(name = "BamBam", owner = "Gene", soundType = "Mrrr", age = 3) {
noOfSounds <- 5
swatWithNewspaper <- function() {
cat("Yelp!\n")
noOfSounds <<- sample(3:10, 1)
}
meow <- function() {
for (i in 1:noOfSounds) cat(soundType)
}
info <- function() {
cat(paste("Name: ", name))
cat(paste("\nOwner: ", owner))
cat(paste("\nAge: ", age))
cat("\n")
}
list(swatWithNewspaper = swatWithNewspaper, meow = meow, info = info)
}
# create 2 kittys
Pebbles <- kitty(name = "Pebbles", owner = "Marta", soundType = "Meeeow", age = 2)
BamBam <- kitty()
BamBam$meow()
Pebbles$meow()
# create a dog "structure"
dog <- function(name = "Fido", owner = "Bob", barkType = "Woof!", age = 3) {
noOfBarks <- 5
swatWithNewspaper <- function() {
cat("Yelp!\n")
noOfBarks <<- sample(3:10, 1)
}
bark <- function() {
for (i in 1:noOfBarks) cat(barkType)
}
info <- function() {
cat(paste("Name: ", name))
cat(paste("\nOwner: ", owner))
cat(paste("\nAge: ", age))
cat("\n")
}
list(swatWithNewspaper = swatWithNewspaper, bark = bark, info = info)
}
# create 2 dogs
snookums <- dog(name = "Snookums", owner = "Granny Smith", barkType = "Yap!", age = 12)
fido <- dog()
snookums$info()
fido$info()
snookums$bark()
fido$bark()
x <- cat(1:100,20,5)
x <- cat(1:100,20,5)
x <- matrix(1:100, 20, 5)
?matrix
class(x)
dim(x)
m1 <- makeVector(x)
source("makeVector.R")
m1 <- makeVector(x)
m1$getmean()
makeVector(m2)
data <- x
m1$set(data)
m1$get()
m1$getmean()
m1$setmean()
m1$setmean(data)
m1$getmean()
m1
z <- 7
m1$setmean(7)
m1$getmean
m1$getmean()
source("makeVector.R")
x <- matrix(1:100,5,20)
m1 <-makeVector(x)
m1$getmean
m1$setmean
m1$setmean()
m1$getmean()
m1$get()
mean(x)
m1$getmean()
p <<-mean(x)
p
source("makeVector.R")
x <- matrix(1:100, 20, 5)
m1 <- makeVector(x)
m1$get()
m1$getmean()
m1$set()
m1$set(x)
m1$get
m1$get()
m1$getmean()
m1$getmean
m2 <- makeVector()
m2$getmean
m2$getmean()
s <- matrix(1:25,5,5)
s
solve(s)
s <- matrix(rep(25),5,5)
solve(s)
s <- matrix(rep(rand()),5,5)
s <-matrix(rep(rnorm()),5,5)
s <-matrix(rnorm(),5,5)
s <-matrix(rnorm(25),5,5)
View(s)
solve(s)
s
t <- s
identical(s,t)
identical(s,t)
v <- solve(s)
identical(s,v)
